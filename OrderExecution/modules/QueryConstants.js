kony = kony || {};
kony.servicesapp = kony.servicesapp || {};
kony.servicesapp.MeasurementPointQuery = "select mp.id,mp.Asset_id,mp.Code,mp.Description, (SELECT COUNT(*) from MeasureValue WHERE MeasureValue.MeasurePoint_id=mp.id and MeasureValue.Task_id = '{Task_id}' and (MeasureValue.OPMODE is Null OR MeasureValue.OPMODE!='D')) as reading_count FROM MeasurePoint mp";
kony.servicesapp.MeasurementViewsQuery = [" group by mp.id"," group by mp.id having reading_count > 0"," group by mp.id having reading_count=0"];
kony.servicesapp.MeasurementSearchQuery = " where ((mp.Asset_id = (select t.Asset_id from Task t where t.Task_num = '{Task_id}') and mp.Asset_id is not null) or (mp.FunctionalLocation_id = (select t.FunctionalLocation_id from Task t where t.Task_num = '{Task_id}') and mp.FunctionalLocation_id is not null)) and (mp.id like '{search_text}' or mp.description like '{search_text}')";
kony.servicesapp.INORDER = "INORDER";
kony.servicesapp.INORDERCRM = "INORDERCRM";
kony.servicesapp.INORDERECC = "INORDERECC";
kony.servicesapp.INTASK = "INTASK";
kony.servicesapp.LOCAL = "LOCAL";
kony.servicesapp.AVAILABLE = "AVAILABLE";
kony.servicesapp.INORDERSEARCHCRM= "INORDERSEARCHCRM";
kony.servicesapp.ORDERRESOURCES_RESOURCEEXECUTION = "ORDERRESOURCES_RESOURCEEXECUTION";
kony.servicesapp.ORDERRESOURCES_RESOURCEEXECUTIONCRM="ORDERRESOURCES_RESOURCEEXECUTIONCRM";
kony.servicesapp.ORDERRESOURCES_RESOURCEDETAILS = "ORDERRESOURCES_RESOURCEDETAILS";
kony.servicesapp.RESOURCEEXECINVENTORY = "RESOURCEEXEC_INVENTORY";
kony.servicesapp.RESOURCEDETAILS_INVENTORY = "RESOURCEEXEC_DETAILS";
kony.servicesapp.TAEORDERLISTWO = "Select id,WorkOrder_id, Type, Description, Duration, Amount, DELETED, Currency_id, Category_id, case Type when 'TIME' Then (select ut.Description from Unit ut where ut.id = DurationUnit_id) when 'EXPE' then (select c.Code from Currency c where c.id = Currency_Id) end as baseUnit, (Select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpenceDesc, case Type when 'TIME' Then Duration when 'EXPE' then Amount end as val from WorkOrderTimeExpense wote where WorkOrder_id = '{x}'"
kony.servicesapp.TAEORDERLISTTASK = "Select id,Task_id, Type, Description, Duration, Amount, DELETED, Currency_id, Category_id, case Type when 'TIME' Then (select ut.Description from Unit ut where ut.id = DurationUnit_id) when 'EXPE' then (select c.Code from Currency c where c.id = Currency_Id) end as baseUnit, (Select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpenceDesc, case Type when 'TIME' Then Duration when 'EXPE' then Amount end as val from TaskTimeExpense wote where Task_id = '{x}'"
kony.servicesapp.TAEORDERLISTCO = "Select id,WorkOrder_id, Task_id, Type, Description, Duration, Amount, DELETED, Currency_id, Category_id, case Type when 'TIME' Then (select ut.Description from Unit ut where ut.id = DurationUnit_id) when 'EXPE' then (select c.Code from Currency c where c.id = Currency_Id) end as baseUnit, (Select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpenceDesc, case Type when 'TIME' Then Duration when 'EXPE' then Amount end as val from WorkOrderTimeExpense wote where WorkOrder_id = '{x}' UNION Select id,WorkOrder_id, Task_id, Type, Description, Duration, Amount, DELETED, Currency_id, Category_id, case Type when 'TIME' Then (select ut.Description from Unit ut where ut.id = DurationUnit_id) when 'EXPE' then (select c.Code from Currency c where c.id = Currency_Id) end as baseUnit, (Select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpenceDesc, case Type when 'TIME' Then Duration when 'EXPE' then Amount end as val from TaskTimeExpense wote where WorkOrder_id = '{x}'"
kony.servicesapp.TAEDETAILSWO = "select Type,Description, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from WorkOrderTimeExpense wote where id = '{x}'"
kony.servicesapp.TAEDETAILSTASK = "select Type,Description, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from TaskTimeExpense tte where id = '{x}'"
kony.servicesapp.TAEDETAILSCO = "Select Type,Description, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from WorkOrderTimeExpense wote where id = '{x}' UNION select Type,Description, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from TaskTimeExpense tte where id = '{x}'"
kony.servicesapp.TAEADDEDITEXPSWO = "select Type,Description, Category_id, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from WorkOrderTimeExpense wote where id = '{x}'"
kony.servicesapp.TAEADDEDITEXPSTASK = "select Type,Description, Category_id, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from TaskTimeExpense tte where id = '{x}'"
kony.servicesapp.TAEADDEDITEXPSCO = "Select Type,Description, Category_id, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from WorkOrderTimeExpense wote where id = '{x}' UNION select Type,Description, Category_id, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Description from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from TaskTimeExpense tte where id = '{x}'"
kony.servicesapp.TAEADDEDITTIMEWO = "select Type,Description, Category_id, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from WorkOrderTimeExpense wote where id = '{x}'"
kony.servicesapp.TAEADDEDITTIMETASK = "select Type,Description,Category_id, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from TaskTimeExpense tte where id = '{x}'"
kony.servicesapp.TAEADDEDITTIMECO = "Select Type,Description, Category_id, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from WorkOrderTimeExpense wote where id = '{x}' UNION select Type,Description, Category_id, ExecutionDate, Amount, Currency_id, IsCustomerBillable, Duration, (select tec.Description from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpnsCategory, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit from TaskTimeExpense tte where id = '{x}'"
kony.servicesapp.TAESEARCHQUERYTASK = "Select id,Task_id, Type, Description, Duration, Amount, Currency_id, Category_id, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit, (Select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpenceDesc from TaskTimeExpense wote where Task_id = '{x}' and (Description like '{search}' or id like '{search}') and DELETED != 'D'"
kony.servicesapp.TAESEARCHQUERYWO = "Select id,WorkOrder_id, Type, Description, Duration, Amount, Currency_id, Category_id, (ifnull((select ut.Description from Unit ut where ut.id = DurationUnit_id), (select c.Code from Currency c where c.id = Currency_Id))) as baseUnit, (Select tec.Name from TimeExpenseCategory tec where tec.id = Category_id) as TimeExpenceDesc from WorkOrderTimeExpense wote where WorkOrder_id = '{x}' and (Description like '{search}' or id like '{search}') and DELETED != 'D'"
kony.servicesapp.TAESEARCHCO = "Select id, WorkOrder_id, Task_id,  Type,  Description,  Duration,  Amount,  Currency_id,  Category_id, (ifnull((select ut.Description from Unit ut where ut.id =  DurationUnit_id), (select c.Code from Currency c where c.id =  Currency_Id))) as baseUnit, (Select tec.Name from TimeExpenseCategory tec where tec.id =  Category_id) as TimeExpenceDesc from TaskTimeExpense wote where  WorkOrder_id = '{x}' and ( Description like '{search}' or  id like '{search}') and DELETED != 'D' UNION Select  id, WorkOrder_id, Task_id, Type,  Description,  Duration,  Amount,  Currency_id,  Category_id, (ifnull((select ut.Description from Unit ut where ut.id =  DurationUnit_id), (select c.Code from Currency c where c.id =  Currency_Id))) as baseUnit, (Select tec.Name from TimeExpenseCategory tec where tec.id =  Category_id) as TimeExpenceDesc from WorkOrderTimeExpense wote where  WorkOrder_id = '{x}' and (Description like '{search}' or  id like '{search}') and DELETED != 'D'" ;
kony.servicesapp.CALCDURATION=
"SELECT (strftime('%s',(substr(wo.ActualEndDate,1,4)||'-'||substr(wo.ActualEndDate,5,2)||'-'||substr(wo.ActualEndDate,7,2)||' '||substr(wo.ActualEndDate,9,2)||':'||substr(wo.ActualEndDate,11,2)||':'||substr(wo.ActualEndDate,13,2))) - strftime('%s',(substr(wo.ActualStartDate,1,4)||'-'||substr(wo.ActualStartDate,5,2)||'-'||substr(wo.ActualStartDate,7,2)||' '||substr(wo.ActualStartDate,9,2)||':'||substr(wo.ActualStartDate,11,2)||':'||substr(wo.ActualStartDate,13,2)))) as duration  FROM workorder wo where wo.id = "
kony.servicesapp.ResourcesQuery = {
    INTASK: "select inv.IsLeaf,inv.id as InvID,inv.Quantity as InventoryQuantity,taskEnt.Status_id as taskStatus,wom.ItemNumber,wom.RequestedUnit_id as ReqId,mat.unit_id as baseunitId,wom.id as womID,wom.isConsumable,MIN(wom.isConsumed) as isConsumed,mat.id as Code,mat.Description as Description,unt.Description as ReqUnitDescription,(select ut.Description from Unit ut where ut.id = mat.Unit_id) as baseUnit,(select case when wom.isConsumed is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity, matType.name as MaterialType,(wom.RequestedQuantity) as RequestedQuantity from Material mat left outer join TaskMaterial wom on wom.Material_id = mat.id and (wom.TaskComp_id ='{x}') left outer join Unit unt on unt.id = wom.RequestedUnit_id left join Inventory inv on inv.material_id =  wom.material_id left join MaterialType matType on matType.id=mat.Type_id left join Task taskEnt on taskEnt.id = wom.TaskComp_id left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id where(wom.TaskComp_id = '{x}') and ((wom.isConsumable='Y' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0) or (wom.isConsumable='N' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0)) and (mat.Description like '{search}' or mat.ModelNumber like '{search}' or  mat.PartNumber like '{search}' or  mat.Barcode = '{search}' or mat.id like '{search}') GROUP BY mat.id,wom.id ORDER BY  wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC",
    INORDERCRM: "select inv.id as InvID,inv.Quantity as InventoryQuantity,inv.IsLeaf,wom.id as womID,wom.RequestedUnit_id as ReqId,mat.unit_id as baseunitId,(select ifnull((select 'Scheduled'  from  WorkOrderMaterial wom1 where wom1.WorkOrder_id ='{x}' and wom1.Material_id=mat.id ), ifnull(( select 'Paused'  from  WorkOrderMaterial wom1 where wom1.WorkOrder_id ='{x}'and wom1.Material_id=mat.id), ifnull(( select 'Started'  from  WorkOrderMaterial wom1 where wom1.WorkOrder_id ='{x}'and wom1.Material_id=mat.id),ifnull(( select 'Completed'  from  WorkOrderMaterial wom1 where wom1.WorkOrder_id ='{x}' and wom1.Material_id=mat.id),'Scheduled'))))) as workOrderStatus ,   wom.isConsumable,MIN(wom.isConsumed) as isConsumed,mat.id as Code,mat.Description as Description, unt.Description as ReqUnitDesc,(select ut.Description from Unit ut where ut.id = mat.Unit_id) as baseUnit,  (select case when MIN(wom.isConsumed) is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity, (select  SUM(ifnull(wom1.RequestedQuantity,0)*ifnull(uom.Factor,1)) from WorkOrderMaterial wom1 where wom1.WorkOrder_id = '{x}' and wom1.isConsumed='Y'  and  wom1.Material_id = mat.id) as ConsumedQuantity,  matType.name as MaterialType,SUM(wom.RequestedQuantity*ifnull(uom.Factor,1)) as RequestedQuantity  from Material mat   left outer join WorkOrderMaterial wom on wom.Material_id = mat.id and (wom.WorkOrder_id = '{x}') left outer join Unit unt on unt.id = wom.RequestedUnit_id left join Inventory inv on inv.material_id =  wom.material_id  left join MaterialType matType on matType.id=mat.Type_id left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id  where(wom.WorkOrder_id = '{x}' and ((wom.isConsumable='Y' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0) or (wom.isConsumable='N' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0))) GROUP by mat.id, wom.isConsumable ORDER BY  wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC",
    INORDERSEARCHCRM: "select inv.id as InvID,inv.Quantity as InventoryQuantity,inv.IsLeaf,wom.id as womID,wom.RequestedUnit_id as ReqId,mat.unit_id as baseunitId,(select ifnull((select 'Scheduled'  from  WorkOrderMaterial wom1 where wom1.WorkOrder_id ='{x}' and wom1.Material_id=mat.id ), ifnull(( select 'Paused'  from  WorkOrderMaterial wom1 where wom1.WorkOrder_id ='{x}'and wom1.Material_id=mat.id), ifnull(( select 'Started'  from  WorkOrderMaterial wom1 where wom1.WorkOrder_id ='{x}'and wom1.Material_id=mat.id),ifnull(( select 'Completed'  from  WorkOrderMaterial wom1 where wom1.WorkOrder_id ='{x}' and wom1.Material_id=mat.id),'Scheduled'))))) as workOrderStatus ,   wom.isConsumable,MIN(wom.isConsumed) as isConsumed,mat.id as Code,mat.Description as Description, unt.Description as ReqUnitDesc,(select ut.Description from Unit ut where ut.id = mat.Unit_id) as baseUnit,  (select case when MIN(wom.isConsumed) is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity, (select  SUM(ifnull(wom1.RequestedQuantity,0)*ifnull(uom.Factor,1)) from WorkOrderMaterial wom1 where wom1.WorkOrder_id = '{x}' and wom1.isConsumed='Y'  and  wom1.Material_id = mat.id) as ConsumedQuantity,  matType.name as MaterialType,SUM(wom.RequestedQuantity*ifnull(uom.Factor,1)) as RequestedQuantity  from Material mat   left outer join WorkOrderMaterial wom on wom.Material_id = mat.id and (wom.WorkOrder_id = '{x}') left outer join Unit unt on unt.id = wom.RequestedUnit_id left join Inventory inv on inv.material_id =  wom.material_id  left join MaterialType matType on matType.id=mat.Type_id left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id  where(wom.WorkOrder_id = '{x}' and ((wom.isConsumable='Y' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0) or (wom.isConsumable='N' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0))) and (mat.Description like '{search}' or mat.ModelNumber like '{search}' or  mat.PartNumber like '{search}' or  mat.Barcode = '{search}' or mat.id like '{search}') GROUP by mat.id, wom.isConsumable ORDER BY  wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC",
  	INORDERECC:"select inv.id as InvID,inv.Quantity as InventoryQuantity,wom.id as womID,wom.RequestedUnit_id as ReqId,mat.unit_id as baseunitId,inv.IsLeaf,"+
			"(select ifnull((select 'Scheduled'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Scheduled' and wom1.Material_id=mat.id"+
			"),	ifnull(("+
			"select 'Paused'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Paused' and wom1.Material_id=mat.id"+
			"), ifnull(("+
			" select 'Started'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Started' and wom1.Material_id=mat.id),"+
			"ifnull(("+
			" select 'Completed'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Completed' and wom1.Material_id=mat.id"+
			"),'Scheduled'))))) as taskStatus ,"+
			"	wom.isConsumable,MIN(wom.isConsumed) as isConsumed,mat.id as Code,mat.Description as Description,"+
			"unt.Description as ReqUnitDescription,(select ut.Description from Unit ut where ut.id = mat.Unit_id) as baseUnit,"+
			"(select case when MIN(wom.isConsumed) is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity, (select  SUM(ifnull(wom1.RequestedQuantity,0)*ifnull(uom.Factor,1)) from TaskMaterial wom1 left join Task tsk on tsk.id=wom.TaskComp_id and tsk.Status_id!='Completed'  where wom1.WorkOrder_id = '{x}' and wom1.isConsumed='Y'  and  wom1.Material_id = mat.id) as ConsumedQuantity, matType.name as MaterialType,SUM(wom.RequestedQuantity*ifnull(uom.Factor,1)) as RequestedQuantity "+
			"from Material mat "+
			"left outer join TaskMaterial wom on wom.Material_id = mat.id and (wom.WorkOrder_id = '{x}') "+
			"	left outer join Unit unt on unt.id = wom.RequestedUnit_id "+
			"	left join Task taskEnt on taskEnt.id=wom.TaskComp_id "+
			"	left join Inventory inv on inv.material_id =  wom.material_id "+
			"	left join MaterialType matType on matType.id=mat.Type_id "+
			"	left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id "+
			"	where(wom.WorkOrder_id = '{x}' and ((wom.isConsumable='Y' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0) or (wom.isConsumable='N' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0)))"+
			"	GROUP by mat.id, wom.isConsumable ORDER BY  wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC ",
    INTASK_BARCODE: "select inv.id as InvID,inv.Quantity as InventoryQuantity,wom.RequestedUnit_id as ReqId,mat.unit_id as baseunitId,taskEnt.Status_id as taskStatus,wom.ItemNumber,wom.id as womID,wom.isConsumable,MIN(wom.isConsumed) as isConsumed,mat.id as Code,mat.Description as Description,unt.Description as ReqUnitDescription,(select ut.Description from Unit ut where ut.id = mat.Unit_id) as baseUnit,(select case when wom.isConsumed is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity, matType.name as MaterialType,(wom.RequestedQuantity) as RequestedQuantity from Material mat left outer join TaskMaterial wom on wom.Material_id = mat.id and (wom.TaskComp_id ='{x}') left outer join Unit unt on unt.id = wom.RequestedUnit_id left join Inventory inv on inv.material_id =  wom.material_id left join MaterialType matType on matType.id=mat.Type_id left join Task taskEnt on taskEnt.id = wom.TaskComp_id left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id where(wom.TaskComp_id = '{x}') and ((wom.isConsumable='Y' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0) or (wom.isConsumable='N' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0)) and (mat.Barcode = '{search}') GROUP BY mat.id,wom.id ORDER BY  wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC",
    INORDER: "select inv.IsLeaf,inv.id as InvID,inv.Quantity as InventoryQuantity,"+
			"(select ifnull((select 'Scheduled'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Scheduled' and wom1.Material_id=mat.id"+
			"),	ifnull(("+
			"select 'Paused'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Paused' and wom1.Material_id=mat.id"+
			"), ifnull(("+
			" select 'Started'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Started' and wom1.Material_id=mat.id),"+
			"ifnull(("+
			" select 'Completed'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Completed' and wom1.Material_id=mat.id"+
			"),'Scheduled'))))) as taskStatus ,wom.ItemNumber,wom.id as womID,wom.isConsumable,MIN(wom.isConsumed) as isConsumed,mat.id as Code,mat.Description as Description,unt.Description as ReqUnitDesc,(select ut.Description from Unit ut where ut.id = mat.Unit_id) as baseUnit,(select case when wom.isConsumed is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity,(select  SUM(ifnull(wom1.RequestedQuantity,0)*ifnull(uom.Factor,1)) from TaskMaterial wom1  where wom1.WorkOrder_id = '{x}' and wom1.isConsumed='Y'  and  wom1.Material_id = mat.id) as ConsumedQuantity, matType.name as MaterialType,SUM(wom.RequestedQuantity*ifnull(uom.Factor,1)) as RequestedQuantity from Material mat left outer join TaskMaterial wom on wom.Material_id = mat.id and (wom.WorkOrder_id ='{x}') left outer join Unit unt on unt.id = mat.Unit_id left join Inventory inv on inv.material_id =  wom.material_id left join MaterialType matType on matType.id=mat.Type_id left join Task taskEnt on taskEnt.id = wom.TaskComp_id left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id where(wom.WorkOrder_id = '{x}') and ((wom.isConsumable='Y' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0) or (wom.isConsumable='N' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0)) and (mat.Description like '{search}' or mat.ModelNumber like '{search}' or mat.PartNumber like '{search}' or  mat.Barcode like '{search}' or  mat.id like '{search}') GROUP BY wom.isConsumable,mat.id ORDER BY  wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC",	
	INORDER_BARCODE: "select inv.id as InvID,inv.Quantity as InventoryQuantity,"+
			"(select ifnull((select 'Scheduled'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Scheduled' and wom1.Material_id=mat.id"+
			"),	ifnull(("+
			"select 'Paused'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Paused' and wom1.Material_id=mat.id"+
			"), ifnull(("+
			" select 'Started'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Started' and wom1.Material_id=mat.id),"+
			"ifnull(("+
			" select 'Completed'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Completed' and wom1.Material_id=mat.id"+
			"),'Scheduled'))))) as taskStatus,wom.ItemNumber,wom.id as womID,wom.isConsumable,MIN(wom.isConsumed) as isConsumed,mat.id as Code,mat.Description as Description,unt.Description as ReqUnitDesc,(select ut.Description from Unit ut where ut.id = mat.Unit_id) as baseUnit,(select case when wom.isConsumed is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity,(select  SUM(ifnull(wom1.RequestedQuantity,0)*ifnull(uom.Factor,1)) from TaskMaterial wom1  where wom1.WorkOrder_id = '{x}' and wom1.isConsumed='Y'  and  wom1.Material_id = mat.id) as ConsumedQuantity, matType.name as MaterialType,SUM(wom.RequestedQuantity*ifnull(uom.Factor,1)) as RequestedQuantity from Material mat left outer join TaskMaterial wom on wom.Material_id = mat.id and (wom.WorkOrder_id ='{x}') left outer join Unit unt on unt.id = mat.Unit_id left join Inventory inv on inv.material_id =  wom.material_id left join MaterialType matType on matType.id=mat.Type_id left join Task taskEnt on taskEnt.id = wom.TaskComp_id left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id where(wom.WorkOrder_id = '{x}') and ((wom.isConsumable='Y' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0) or (wom.isConsumable='N' and cast(wom.RequestedQuantity as DECIMAL(10,2))>0)) and (mat.Barcode = '{search}') GROUP BY wom.isConsumable,mat.id ORDER BY  wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC ",	
    LOCAL: "select inv.IsLeaf,inv.id as InvID,inv.Quantity as InventoryQuantity,"+
			"(select ifnull((select 'Scheduled'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Scheduled' and wom1.Material_id=mat.id"+
			"),	ifnull(("+
			"select 'Paused'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Paused' and wom1.Material_id=mat.id"+
			"), ifnull(("+
			" select 'Started'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Started' and wom1.Material_id=mat.id),"+
			"ifnull(("+
			" select 'Completed'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Completed' and wom1.Material_id=mat.id"+
			"),'Scheduled'))))) as taskStatus ,wom.ItemNumber,wom.id as womID,wom.isConsumable,ut.Description as baseUnit, COALESCE(nullif(MIN(wom.isConsumed),''),'N') as isConsumed,mat.id as Code,mat.Description as Description,unt.Description as ReqUnitDesc,inv.quantity as InventoryQuantity, matType.name as MaterialType,(select case when ifnull(wom.isConsumed,'') is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity, SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1)) as RequestedQuantity,(select  SUM(ifnull(wom1.RequestedQuantity,0)*ifnull(uom.Factor,1)) from TaskMaterial wom1  where wom1.WorkOrder_id = '{x}' and wom1.isConsumed='Y'  and  wom1.Material_id = mat.id) as ConsumedQuantity,wom.WorkOrder_id as WorkOrder_ID, wom.TaskComp_id as Task_ID from Material mat left outer join TaskMaterial wom on wom.Material_id = mat.id and (wom.WorkOrder_id = '{x}' ) left join Inventory inv on inv.material_id =  mat.id left outer join Unit unt on unt.id = wom.RequestedUnit_Id left join MaterialType matType on matType.id=mat.Type_id left join Task taskEnt on taskEnt.id = wom.TaskComp_id left join Unit ut on mat.Unit_id = ut.id left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id where ( (mat.Description like '{search}' or mat.ModelNumber like '{search}' or mat.PartNumber like '{search}' or  mat.Barcode like '{search}' or  mat.id like '{search}') and cast(inv.quantity as DECIMAL(10,2))>0 )GROUP by mat.id,wom.isConsumable having AvailableQuantity >0 ORDER BY wom.WorkOrder_id ASC,wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC",
	LOCAL_BARCODE: "select inv.id as InvID,inv.Quantity as InventoryQuantity,"+
			"(select ifnull((select 'Scheduled'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Scheduled' and wom1.Material_id=mat.id"+
			"),	ifnull(("+
			"select 'Paused'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Paused' and wom1.Material_id=mat.id"+
			"), ifnull(("+
			" select 'Started'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Started' and wom1.Material_id=mat.id),"+
			"ifnull(("+
			" select 'Completed'  from  TaskMaterial wom1"+
			" left join task t on wom1.Workorder_id=t.Workorder_id and t.id=wom1.Taskcomp_id"+
			" where wom1.WorkOrder_id ='{x}' and t.status_id = 'Completed' and wom1.Material_id=mat.id"+
			"),'Scheduled'))))) as taskStatus ,wom.ItemNumber,wom.id as womID,wom.isConsumable,ut.Description as baseUnit, COALESCE(nullif(MIN(wom.isConsumed),''),'N') as isConsumed,mat.id as Code,mat.Description as Description,unt.Description as ReqUnitDesc,inv.quantity as InventoryQuantity, matType.name as MaterialType,(select case when ifnull(wom.isConsumed,'') is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity, SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1)) as RequestedQuantity,(select  SUM(ifnull(wom1.RequestedQuantity,0)*ifnull(uom.Factor,1)) from TaskMaterial wom1  where wom1.WorkOrder_id = '{x}' and wom1.isConsumed='Y'  and  wom1.Material_id = mat.id) as ConsumedQuantity,wom.WorkOrder_id as WorkOrder_ID, wom.TaskComp_id as Task_ID from Material mat left outer join TaskMaterial wom on wom.Material_id = mat.id and (wom.WorkOrder_id = '{x}' ) left join Inventory inv on inv.material_id =  mat.id left outer join Unit unt on unt.id = wom.RequestedUnit_Id left join MaterialType matType on matType.id=mat.Type_id left join Task taskEnt on taskEnt.id = wom.TaskComp_id left join Unit ut on mat.Unit_id = ut.id left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id where ( (mat.Barcode = '{search}') and cast(inv.quantity as DECIMAL(10,2))>0 )GROUP by mat.id,wom.isConsumable having AvailableQuantity >0 ORDER BY wom.WorkOrder_id ASC,wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC ",
	TASK_LOCAL: "select inv.IsLeaf,inv.id as InvID,inv.Quantity as InventoryQuantity,wom.RequestedUnit_id as ReqId,mat.unit_id as baseunitId,MIN(taskEnt.Status_id) as taskStatus,wom.ItemNumber,wom.id as womID,wom.isConsumable,ut.Description as baseUnit,COALESCE(nullif(wom.isConsumed,''),'N') as isConsumed,mat.id as Code,mat.Description as Description,unt.Description as ReqUnitDescription,inv.quantity as InventoryQuantity, matType.name as MaterialType,(select case when ifnull(wom.isConsumed,'') is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity, (wom.RequestedQuantity) as RequestedQuantity,wom.WorkOrder_id as WorkOrder_ID, wom.TaskComp_id as Task_ID from Material mat left outer join TaskMaterial wom on wom.Material_id = mat.id and (wom.TaskComp_id = '{y}' ) left join Inventory inv on inv.material_id =  mat.id left outer join Unit unt on unt.id = wom.RequestedUnit_Id left join MaterialType matType on matType.id=mat.Type_id left join Task taskEnt on taskEnt.id = wom.TaskComp_id left join Unit ut on mat.Unit_id = ut.id  left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id  where ( (mat.Description like '{search}' or mat.ModelNumber like '{search}' or mat.PartNumber like '{search}' or  mat.Barcode like '{search}' or  mat.id like '{search}') and cast(inv.quantity as DECIMAL(10,2))>0 )GROUP by mat.id,wom.id having AvailableQuantity >0 ORDER BY wom.WorkOrder_id ASC,wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC",
	TASK_LOCAL_BARCODE: "select inv.id as InvID,wom.RequestedUnit_id as ReqId,mat.unit_id as baseunitId,inv.Quantity as InventoryQuantity,MIN(taskEnt.Status_id) as taskStatus,wom.ItemNumber,wom.id as womID,wom.isConsumable,ut.Description as baseUnit,COALESCE(nullif(wom.isConsumed,''),'N') as isConsumed,mat.id as Code,mat.Description as Description,unt.Description as ReqUnitDescription,inv.quantity as InventoryQuantity, matType.name as MaterialType,(select case when ifnull(wom.isConsumed,'') is 'Y' then inv.quantity ELSE (inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) end as AQ) as AvailableQuantity, (wom.RequestedQuantity) as RequestedQuantity,wom.WorkOrder_id as WorkOrder_ID, wom.TaskComp_id as Task_ID from Material mat left outer join TaskMaterial wom on wom.Material_id = mat.id and (wom.TaskComp_id = '{y}' ) left join Inventory inv on inv.material_id =  mat.id left outer join Unit unt on unt.id = wom.RequestedUnit_Id left join MaterialType matType on matType.id=mat.Type_id left join Task taskEnt on taskEnt.id = wom.TaskComp_id left join Unit ut on mat.Unit_id = ut.id  left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id  where ( (mat.Barcode = '{search}') and cast(inv.quantity as DECIMAL(10,2))>0 )GROUP by mat.id,wom.id having AvailableQuantity >0 ORDER BY wom.WorkOrder_id ASC,wom.isConsumed ASC,mat.Description ASC,wom.isConsumable DESC",
    AVAILABLE: "select inv.id as InvID,inv.Quantity as InventoryQuantity,taskEnt.Status_id as taskStatus,wom.ItemNumber,wom.id as womID,wom.isConsumable,MIN(wom.isConsumed) as isConsumed,mat.id as Code,mat.Description as Description,unt.Description as ReqUnitDesc,inv.quantity as InventoryQuantity, matType.name as MaterialType,(select ut.Description from Unit ut where mat.Unit_id =ut.id and mat.id='{y}') as baseUnit,(inv.quantity - SUM(ifnull(wom.RequestedQuantity,0)*ifnull(uom.Factor,1))) as AvailableQuantity from Material mat left join Inventory inv on inv.material_id =  mat.id left outer join TaskMaterial wom on wom.Material_id = mat.id left outer join Unit unt on unt.id = wom.RequestedUnit_Id left join MaterialType matType on matType.id=mat.Type_id left join Task taskEnt on taskEnt.id = wom.TaskComp_id left join UnitConversion uom on wom.RequestedUnit_id = uom.UnitFrom_id and wom.Material_id=uom.Material_id and mat.Unit_id = uom.UnitTo_id where cast(inv.quantity as DECIMAL(10,2)) > 0 GROUP by mat.id ORDER BY Description ASC",
    ORDERRESOURCES_RESOURCEEXECUTION: "select mat.unit_id as baseunitId,wom.RequestedUnit_id as ReqId,inv.Quantity as invQuantity,inv.id as InvID ,wom.isConsumable,wom.isConsumed,wom.id as key,mat.Description,mat.PartNumber,mat.id,mat.ModelNumber,matType.Name as mat_type,uom.Factor as uomF, SUM(wom.RequestedQuantity*ifnull(uom.Factor,1)) as Quantity,mat.Barcode,un.Description as ReqUnitDesc,un.Description as baseUnitDesc ,un.id as uomId from Material mat left join MaterialType matType on matType.id=mat.Type_id left join Inventory inv on inv.Material_id = mat.id left join TaskMaterial wom on mat.id=wom.Material_id left join Unit un on un.id=mat.Unit_id left join UnitConversion uom on wom.RequestedUnit_Id=uom.UnitFrom_id and mat.Unit_id=uom.UnitTo_id and uom.Material_id = mat.id where mat.id='{y}' and (wom.Workorder_id= '{x}')",
    ORDERRESOURCES_RESOURCEEXECUTIONCRM:"select mat.unit_id as baseunitId,wom.RequestedUnit_id as ReqId,inv.Quantity as invQuantity,inv.id as InvID ,wom.isConsumable,wom.isConsumed,wom.id as key,mat.Description,mat.PartNumber,mat.id,mat.ModelNumber,matType.Name as mat_type,uom.Factor as uomF, SUM(wom.RequestedQuantity*ifnull(uom.Factor,1)) as Quantity,mat.Barcode,un.Description as ReqUnitDesc,un.Description as baseUnitDesc ,un.id as uomId from Material mat left join MaterialType matType on matType.id=mat.Type_id left join Inventory inv on inv.Material_id = mat.id left join WorkOrderMaterial wom on mat.id=wom.Material_id left join Unit un on un.id=mat.Unit_id left join UnitConversion uom on wom.RequestedUnit_Id=uom.UnitFrom_id and mat.Unit_id=uom.UnitTo_id and uom.Material_id = mat.id where mat.id='{y}' and (wom.Workorder_id= '{x}')",
	RESOURCEEXEC_INVENTORY: "select mat.unit_id as baseunitId,inv.Quantity as invQuantity,inv.id as InvID ,mat.Description,mat.PartNumber,mat.id,mat.ModelNumber,matType.Name as mat_type,mat.Barcode,un.Description as baseUnitDesc from Material mat inner join Inventory inv on inv.Material_id = mat.id left join MaterialType matType on matType.id=mat.Type_id left join Unit un on un.id=mat.Unit_id where mat.id='{x}'",
    ORDERRESOURCES_RESOURCEDETAILS: "select mat.Description,inv.Quantity,SUM(wom.RequestedQuantity*ifnull(uom.Factor,1)) as RequestedQuantity,mat.id as Code from Material mat left join TaskMaterial wom on wom.Material_id = mat.id left join Inventory inv on inv.Material_id = mat.id left join UnitConversion uom on uom.UnitFrom_id=wom.RequestedUnit_Id and uom.UnitTo_id = mat.Unit_id and uom.material_id = mat.id where mat.id= '{x}' and ( wom.WorkOrder_id='{y}' ) and wom.isConsumable='{z}' ",
    RESOURCEEXEC_DETAILS:"select mat.Description,inv.Quantity,(0) as RequestedQuantity,mat.id as Code from Material mat left join TaskMaterial wom on wom.Material_id = mat.id left join Inventory inv on inv.Material_id = mat.id where mat.id= '{x}' " }
kony.servicesapp.QueryConstants = Class({
    $statics: {
        scopeObj: null,
        getQueryConstantsObj: function() {
            if (kony.servicesapp.QueryConstants.scopeObj) {
                return kony.servicesapp.QueryConstants.scopeObj;
            } else {
                kony.servicesapp.QueryConstants.scopeObj = new kony.servicesapp.QueryConstants();
                return kony.servicesapp.QueryConstants.scopeObj;
            }
        }
    },
    /**
     * constructor method.
     */
    constructor: function() {
        try {
            this.getQuery = function(queryKey) {
                if (kony.servicesapp.ResourcesQuery[queryKey]) {
                    return kony.servicesapp.ResourcesQuery[queryKey];
                }
            };
        } catch (err) {
            kony.print("==error in fetching query from constants==>");
            kony.print(err.toString());
        }
    }
});